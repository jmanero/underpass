#!/usr/bin/env bash
set -e

usage() {
  cat >&2 <<USAGE
  USAGE: $0 [flags] TARGET

  Install vault executable, HCL configuration, vault-yubikey-helper, and systemd
  service units on a remote host to bootstrap a Vault raft cluster

  Print this and exit
  --help

  Generate a DN string (/CN=\$target/DC=\$datacenter/C=\$region) for listener
  certificates. 'datacenter' is also configured as the instance's 'cluster_name'
  --datacenter DC:default
  --region REGION:us (Must be 2 characters)

  Initialize a new vault with vault-yubikey-helper
  --init

  Try to join an existing vault raft cluster after startup
  --join LEADER_ADDR

  Select executable platform and versions to install
  --os OS:linux
  --arch ARCH:amd64
  --env FILE:environment

USAGE

  exit 1
}

env_path="environment"
region="xx"
datacenter="default"
platform_os="linux"
platform_arch="amd64"

while [ -n "$1" ]; do
  case $1 in
  "--help")
    usage
    ;;

  "--datacenter")
    shift
    datacenter="$1"
    ;;
  "--region")
    shift
    region="$1"
    ;;

  "--init")
    init="yes"
    ;;
  "--join")
    shift
    join="$1"
    ;;

  "--os")
    shift
    platform_os="$1"
    ;;
  "--arch")
    shift
    platform_arch="$1"
    ;;
  "--env")
    shift
    env_path="$1"
    ;;

  --*)
    echo "Invalid flag `$1`" >&2
    usage
    ;;

  *)
    target="$1"
  esac
  shift
done

if [ -z "$target" ]; then
  echo "Missing required argument TARGET" >&2
  usage
fi

source "$env_path"
platform="${platform_os}_${platform_arch}"

files="${files} bin/vault_${VAULT_VERSION}_${platform}"
files="${files} bin/vault-yubikey-helper_${VAULT_YK_HELPER_VERSION}_${platform}"
files="${files} conf/vault/"
files="${files} ca/certs/vault-listener-${target}.pem"
files="${files} ca/roots.pem"

## Establish a persistent control-master session
ssh -N -o "ControlMaster=yes" -f "$target"

## Stop the control-master process before exiting
trap "ssh -O exit \"$target\"" exit

## Create vault user, prepare directories
ssh "$target" sudo bash <<SCRIPT
set -ex

if [ \$(systemctl is-active vault.service) != "inactive" ]; then
  systemctl stop vault.service vault-unseal.service vault-login.service vault-login.timer
fi

if ! grep vault /etc/passwd >/dev/null; then
  useradd --home-dir /var/lib/vault --no-create-home --shell /usr/sbin/nologin --system vault
fi

mkdir -p /usr/local/libexec/vault /etc/vault /var/lib/vault
chmod -R 0700 /var/lib/vault
chown -R vault:vault /var/lib/vault
SCRIPT

## Generate a private-key and signing-request
./scripts/request-cert --path /var/cert/yk/vault/listener --owner vault --datacenter $datacenter --region $region --server $target vault-listener

## Sign the listener certificate request
./bin/vault-yubikey-helper pki sign --req-in "ca/requests/vault-listener-${target}.pem" --cert-out "ca/certs/vault-listener-${target}.pem"
## Export the CA certificate
./bin/vault-yubikey-helper pki cert --cert-out ca/roots.pem

echo "Provisioning Vault on ${target}"
ssh "$target" mkdir -p provisioning/vault
rsync -av --delete $files "${target}:provisioning/vault"

ssh $target sudo bash <<SCRIPT
set -ex

pushd provisioning/vault

cp "vault_${VAULT_VERSION}_${platform}" /usr/local/bin/vault
cp "vault-yubikey-helper_${VAULT_YK_HELPER_VERSION}_${platform}" /usr/local/libexec/vault-yubikey-helper
cp *.{service,timer} /etc/systemd/system/
cp "vault-listener-${target}.pem" /var/cert/yk/vault/listener/cert.pem
cp roots.pem /var/cert/yk/roots.pem
cp *.hcl /etc/vault/

popd

## cluster_name
tee /etc/vault/locale.hcl <<HCL
cluster_name = "${datacenter}"
HCL

## Raft node_id and YUBIKEY_PIN
tee /etc/vault/vault.env << ENV
VAULT_RAFT_NODE_ID="\$(hostname -s)"
YUBIKEY_PIN="${TARGET_YUBIKEY_PIN}"
ENV

chmod 0600 /etc/vault/vault.env

if [ \$(systemctl is-enabled vault.service) != "enabled" ]; then
  systemctl enable --now vault.service vault-unseal.service vault-login.service vault-login.timer || true
else
  systemctl daemon-reload
  systemctl start vault-login.timer
  systemctl restart vault.service vault-unseal.service vault-login.service
fi

if [ "$init" == "yes" ]; then
  /usr/local/libexec/vault-yubikey-helper init /var/lib/vault/yubikey-seal.json
  systemctl start vault-unseal.service
elif [ -n "$join" -a -f /var/lib/vault/yubikey-seal.json ]; then
  VAULT_ADDR=http://127.0.0.1:8200; export VAULT_ADDR

  vault operator raft join -leader-ca-cert=@/var/cert/yk/roots.pem "$join"
  systemctl start vault-unseal.service
fi
SCRIPT
